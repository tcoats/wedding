// Generated by CoffeeScript 1.9.1
var component, dom, emblem, form2js, hub, inject, ql, ref, rsvp, widget;

ref = require('odojs'), component = ref.component, dom = ref.dom, widget = ref.widget;

inject = require('injectinto');

ql = require('odoql/ql');

hub = require('odo-hub');

form2js = require('../plumbing/form2js');

emblem = require('./emblem');

rsvp = component({
  render: function(state, params) {
    var checkboxattrs, contents, fn, i, index, items, len, name, nameinput, ref1, whoattrs;
    nameinput = function(index, name, cb) {
      return dom('div', [
        dom('input', {
          onkeyup: function(e) {
            if (e.keyCode === 13) {
              return cb(e.target.value);
            }
          },
          onblur: function(e) {
            return cb(e.target.value);
          },
          attributes: {
            name: params.eventid + ".attending[" + index + "]",
            type: 'text',
            autocomplete: 'off',
            autocorrect: 'off',
            autocapitalize: 'off',
            value: name
          }
        })
      ]);
    };
    items = [];
    ref1 = state.attending;
    fn = function(index) {
      return items.push(nameinput(index, name, function(newname) {
        return hub.emit("{eventid} attendee {index} is {name}", {
          eventid: params.eventid,
          index: index,
          name: newname
        });
      }));
    };
    for (index = i = 0, len = ref1.length; i < len; index = ++i) {
      name = ref1[index];
      fn(index);
    }
    checkboxattrs = {
      name: params.eventid + ".going",
      type: 'checkbox',
      value: 'true'
    };
    if (state.going) {
      checkboxattrs.checked = 'checked';
    }
    contents = [
      dom('label', [
        dom('span', "RSVP to the " + params.eventtitle), dom('input', {
          attributes: checkboxattrs,
          onchange: function(e) {
            return hub.emit('{eventid} RSVP {attending}', {
              eventid: params.eventid,
              attending: e.target.checked
            });
          }
        }), dom('span')
      ])
    ];
    whoattrs = {};
    if (!state.going) {
      whoattrs.style = 'display: none;';
    }
    contents.push(dom('div', {
      attributes: whoattrs
    }, [dom('h4', 'Who is attending?'), dom('div', items)]));
    return dom('div', contents);
  }
});

inject.bind('page:default', component({
  query: function(params) {
    return {
      invite: ql.query('invites', 'asdf')
    };
  },
  render: function(state, params) {
    var submit, titileattr;
    submit = function(e) {
      var data;
      data = form2js(e.target, null, false);
      console.log(JSON.stringify(data, null, 2));
      return e.preventDefault();
    };
    titileattr = {
      attributes: {
        "class": 'title',
        src: '/title.png'
      }
    };
    return dom('div', {
      attributes: {
        "class": 'wrapper'
      }
    }, [
      dom('div', {
        attributes: {
          "class": 'nb nb-top'
        }
      }, [emblem()]), dom('div', {
        attributes: {
          "class": 'nb nb-section'
        }
      }, [
        dom('h1', state.invite.to), dom('form', {
          onsubmit: submit
        }, [
          rsvp(state.invite['prewedding'], {
            eventid: 'prewedding',
            eventtitle: 'Pre Wedding Celebrations'
          }), rsvp(state.invite['ceremony'], {
            eventid: 'ceremony',
            eventtitle: 'Wedding Ceremony'
          }), rsvp(state.invite['reception'], {
            eventid: 'reception',
            eventtitle: 'Wedding Reception'
          }), dom('input', {
            attributes: {
              type: 'submit',
              value: 'Go'
            }
          })
        ])
      ]), dom('div', {
        attributes: {
          "class": 'nb nb-bottom'
        }
      }, [emblem()])
    ]);
  }
}));
