// Generated by CoffeeScript 1.9.2
var Router, body, component, dynamic, exe, getpage, hook, hub, inject, loading, odoql, page, ref, relay, request, root, scene, widget;

hub = require('odo-hub');

ref = require('odojs'), component = ref.component, widget = ref.widget, hook = ref.hook;

odoql = require('odoql/odojs');

component.use(odoql);

widget.use(odoql);

hook.use(odoql);

dynamic = require('odoql-exe/dynamic');

exe = require('odoql-exe');

exe = exe({
  hub: hub
}).use(dynamic(function(keys, queries, cb) {
  var request;
  request = require('superagent');
  return request.post('/query').send({
    q: queries
  }).set('Accept', 'application/json').end(function(err, res) {
    var i, key, len, result;
    if (err != null) {
      return cb(err);
    }
    if (!res.ok) {
      return cb(new Error(res.text));
    }
    result = {};
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      result[key] = res.body[key];
    }
    return cb(null, result);
  });
}));

require('../components/');

page = require('page');

inject = require('injectinto');

page('/', function(e) {
  return hub.emit('navigate to the front page');
});

page('/:code', function(e) {
  return hub.emit('navigate to the default page', e.params);
});

page(function(details) {
  return hub.emit('navigation error, {pathname} not found', details);
});

getpage = function(params) {
  var ref1;
  page = (ref1 = params.page) != null ? ref1 : 'default';
  if (page instanceof Object) {
    page = page.name;
  }
  return inject.one("page:" + page);
};

Router = component({
  query: function(params) {
    return getpage(params).query(params);
  },
  render: function(state, params) {
    return getpage(params)(state, params);
  }
});

relay = require('odo-relay');

root = document.querySelector('#root');

scene = relay(root, Router, exe, {
  queries: window.__queries,
  state: window.__state,
  hub: hub
});

hub.all(function(e, description, p, cb) {
  var timings;
  if (e === 'queries starting') {
    console.log("? " + p.description);
  } else if (e === 'queries completed') {
    timings = Object.keys(p).map(function(prop) {
      return "  " + prop + " in " + p[prop] + "ms";
    }).join('\n');
    console.log("âˆš completed\n" + timings);
  } else {
    console.log("+ " + description);
  }
  return cb();
});

hub.every('{eventid} RSVP {attending}', function(p, cb) {
  scene.state().invite[p.eventid].going = p.attending;
  scene.update();
  return cb();
});

hub.every('{eventid} attendee {index} is {name}', function(p, cb) {
  scene.state().invite[p.eventid].attending[p.index] = p.name;
  scene.update();
  return cb();
});

hub.every('navigate to the default page', function(p, cb) {
  scene.update({
    page: {
      name: 'default',
      code: p.code
    }
  });
  return cb();
});

hub.every('navigate to the front page', function(p, cb) {
  scene.update({
    page: {
      name: 'front'
    }
  });
  return cb();
});

hub.every('navigation error, {pathname} not found', function(p, cb) {
  scene.update({
    page: {
      name: 'error',
      message: "Sorry, the \"" + p.pathname + "\" page was not found."
    }
  });
  return cb();
});

hub.every('event error, {code} not found', function(p, cb) {
  scene.update({
    page: {
      name: 'error',
      message: "Sorry, the event code \"" + p.code + "\" was not found."
    }
  });
  return cb();
});

hub.every('event error, {code} submit failed', function(p, cb) {
  scene.update({
    page: {
      name: 'error',
      message: 'Sorry, something went wrong. Refresh to try again?'
    }
  });
  return cb();
});

hub.every('show bank details', function(p, cb) {
  scene.update({
    showbankdetails: true
  });
  return cb();
});

hub.every('event submit {code} success', function(p, cb) {
  scene.update({
    success: true
  });
  return cb();
});

request = require('superagent');

hub.every('event code {code} submitted', function(p, cb) {
  require('page').stop();
  return request.post('/submit').query({
    code: p.code
  }).send(p.data).end(function(err, res) {
    cb();
    if ((err != null) || !res.ok) {
      console.error(err);
      hub.emit('event error, {code} submit failed', p);
      return;
    }
    return hub.emit('event submit {code} success', p);
  });
});

page();

body = document.querySelector('body');

loading = document.querySelector('#loading');

body.removeChild(loading);
